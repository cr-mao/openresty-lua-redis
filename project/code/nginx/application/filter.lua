---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cr-mao.
--- DateTime: 2020/11/23 下午9:31
---


--ngx.say()
--分隔函数
local ngx_re_split=require("ngx.re").split

-- 从共享内存中获得
local ip_addr=ngx.shared.redis_cluster_addr:get('redis-addr')
local ip_addr_table=ngx_re_split(ip_addr,",")
local redis_addr={}
for key, value in ipairs(ip_addr_table) do
    local ip_addr=ngx_re_split(value,":")
    redis_addr[key]={ip=ip_addr[1],port=ip_addr[2]}
    --ngx.print(value) -- Key value after base64 decoding
end

local config = {
    name = "testCluster",                   --rediscluster name
    serv_list=redis_addr,
    keepalive_timeout = 60000,              --redis connection pool idle timeout
    keepalive_cons = 1000,                  --redis connection pool size
    connection_timout = 1000,               --timeout while connecting
    max_redirection = 5,                    --maximum retry attempts for redirection
    -- auth="password"

}

local redis_cluster = require "rediscluster"
local red_c = redis_cluster:new(config)


-- redis中嵌入lua
ngx.say("1111")

local ok,err=red_c:eval([[
                 local key=KEYS[1]
                 local val=ARGV[1]
             --  local res,err=redis.call("bf.add",key,val)
                 local res,err=redis.call("bf.exists",key,val)
                 return res
  ]],1,'{bf_1}','test1')
-- 1个 key,  {bf_1} 括号扩起来
-- Redis集群当中使用hashTag让key分配在某个节点
--Hash Tag 原理是：当一个 key 包含 {} 的时候，不对整个 key 做 hash，而仅对 {} 包括的字符串做 hash。 Hash Tag 可以让不同的 key 拥有相同的 hash 值，从
--而分配在同一个槽里;这样针对不同 key 的批量操作(mget/mset 等)，以及事务、Lua 脚本等都可以支持。
-- 布隆过滤器过滤
ngx.say(ok)



-- key个数，
--local v, err = red_c:get("cr-mao")
--if err then
--    ngx.log(ngx.ERR, "err: ", err)
--else
--    ngx.say(v)
--end
--
